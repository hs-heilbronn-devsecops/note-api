name: Test_and_Vulnerability_Scanning

#Trigger workflow on pull requests to all branches and push to the main branch
on:
  pull_request:
    branches:
      - main
      - '**'
  push:
    branches:
      - main

jobs:
  #Job for testing and code coverage report
  test:
    runs-on: ubuntu-latest

    #Sepcify trigger conditions to react to (in case of additional triggers are added to workflow)
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."

      - name: Checkout code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          #Caching packages dependencies
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'
      - run: echo "Python has been set up."

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt && pip install -r requirements-dev.txt
      - run: echo "Dependencies have been installed."

      - name: Run tests with pytest
        #Using all available CPU-cores with -n auto
        #Measure code coverage during the test with --cov
        #Generate coverage report
        run: pytest -n auto --cov=note_api tests/ --cov-report=xml
      
      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - run: echo "Uploaded coverage report to Codecov"

      - run: echo "Pytest has been executed. Job status is ${{ job.status }}."

  #Job for detecting and monitoring security vulnerabilities
  security:

    #Set permissions for uploading SARIF files to the organizations Code scanning
    permissions:
      actions: read
      contents: read
      security-events: write

    runs-on: ubuntu-latest

    #Sepcify trigger conditions to only react to push (not to pull_request)
    if: github.event_name == 'push'
    steps:

      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."

      - name: Checkout code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."


      # Snyk automatically runs pip install -r requirements.txt with commands: test and monitoring
      # The requirements-dev.txt was not specified as an argument, because these dependencies will not be used in production.
      

      # Immediate, one-time scan for vulnerabilities during developement.
      # Test also used for generating a SARIF file
      - name: Run Snyk test for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --sarif-file-output=snyk.sarif
      - run: echo "Security scan executed. SARIF file generated"

      #Make security vulnerabilities visible in GitHub
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
      - run: echo "SARIF file uploaded to GitHub Code Scanning"

      #Continuous monitoring for vulnerabilities for ongoing security management.
      - name: Run Snyk to monitor project
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
      - run: echo "Snapshot sent to SNYK for continuous monitoring"